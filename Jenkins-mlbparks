#!groovy

// Run this node on a Maven Slave
// Maven Slaves have JDK and Maven already installed
node('maven') {
  // Define Maven Command. Make sure it points to the correct settings for our
  // Nexus installation. The file nexus_openshift_settings.xml needs to be in the
  // Source Code repository.
  def myApp = "mlbparks"
  def mvnCmd = "cd ./" + myApp + ";pwd;mvn -s ../nexus_settings.xml"
  def sonarArgs = " sonar:sonar -Dsonar.host.url=http://sonarqube-mal-gogs.apps.na1.openshift.opentlc.com"
  //def mvnRelUrl = "http://nexus3-jenkins.192.168.99.100.nip.io/repository/releases/"
  def mvnRelUrl = "http://nexus3-jenkins.mikes-apps.mikelacourse-services.com/repository/releases/"
  def myNamespace = "adv-dev-hw"

  stage('Checkout Source') {
    // Get Source Code from SCM (Git) as configured in the Jenkins Project
    // Next line for inline script, "checkout scm" for Jenkinsfile from Gogs
    //git 'http://gogs.xyz-gogs.svc.cluster.local:3000/CICDLabs/openshift-mlbparks.git'
    checkout scm
  }

  // The following variables need to be defined at the top level and not inside
  // the scope of a stage - otherwise they would not be accessible from other stages.
  // Extract version and other properties from the pom.xml
  def groupId    = getGroupIdFromPom(myApp + "/pom.xml")
  def artifactId = getArtifactIdFromPom(myApp + "/pom.xml")
  def version    = getVersionFromPom(myApp + "/pom.xml")

  // Using Maven build the war file
  // Do not run tests in this step
  stage('Build war') {
    sh mvnCmd + " -Dmaven.test.skip=true clean package"
  }

  // Using Maven run the unit tests
  stage('Unit Tests') {
    //sh mvnCmd + " test"
  }

  // Using Maven call SonarQube for Code Analysis
  stage('Code Analysis') {
    //sh mvnCmd + sonarArgs
  }

  // Publish the latest war file to Nexus. This needs to go into <nexusurl>/repository/releases.
  // Using the properties from the pom.xml file construct a filename that includes the version number from the pom.xml file
  stage('Publish to Nexus') {
    echo "Current Version:" + version
    def newCmd = mvnCmd + " deploy:deploy-file -Durl=" + mvnRelUrl 
    newCmd = newCmd + " -Dfile=target/" + myApp + ".war -DartifactId=" + artifactId + " -DgroupId="
    newCmd = newCmd + groupId + " -Dversion=" + version + " -DrepositoryId=nexus"
    echo "cmd :" + newCmd
    sh newCmd
    
    echo "Done Deploy"
    
    String warFileName = "${groupId}.${artifactId}"
    warFileName = warFileName.replace('.', '/')
    
    sh "echo ${warFileName}/${version}/${artifactId}-${version}.war"
    sh "echo WAR_FILE_LOCATION=" + mvnRelUrl + "${warFileName}/${version}/${artifactId}-${version}.war > " + myApp + "/s2i-build/.s2i/environment"
    sh "echo BUILD_NUMBER=${BUILD_NUMBER} >> "+  myApp +  "/s2i-build/.s2i/environment"

    // Update the Git/Gogs repository with the latest file
    // Replace XYZ with your Initials
    def commit = "Release " + version
    sh "git config --global user.name 'malacourse';git config --global user.email 'mlacours@redhat.com';git add " + myApp + "/s2i-build/.s2i/environment; git commit -m \"${commit}\"; git push origin HEAD:master"
    echo "Push to Nexus Done"  

  }
  def newTag = ""


  // Build the OpenShift Image in OpenShift. 
  // 1. When doing a binary build make sure to rename the file ./target/openshift-mlbparks.war to ROOT.war before you start the build.
  // 2. When doing a build with external artifacts make sure to use the build configuration pointing to openshift-mlbparks-ocp
  //    for the .s2i/bin/assemble script to retrieve the war file from the location in the .s2i/environment file.
  // Also tag the image with "TestingCandidate-${version}" - e.g. TestingCandidate-1.5
  stage('Build OpenShift Image') {
      newTag = "TestReady-${version}"
      echo "New Tag: ${newTag}"
      // Replace xyz-mlbparks-dev with the name of your dev project
      openshiftBuild bldCfg: "${myApp}", checkForTriggeredDeployments: 'false', namespace: "${myNamespace}", showBuildLogs: 'false', verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyBuild bldCfg: "${myApp}", checkForTriggeredDeployments: 'false', namespace: "$myNamespace", verbose: 'false', waitTime: ''
      openshiftTag alias: 'false', destStream: "${myApp}", destTag: newTag, destinationNamespace: "${myNamespace}", namespace: "${myNamespace}", srcStream: "${myApp}", srcTag: 'latest', verbose: 'false'  
   }

  stage('Deploy to Dev') {
    // Patch the DeploymentConfig so that it points to the latest TestingCandidate-${version} Image.
    // Replace xyz-mlbparks-dev with the name of your dev project
    sh "oc project " + myNamespace
    sh "oc patch dc ${myApp} --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"${myApp}\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"${myNamespace}\", \"name\": \"${myApp}:$newTag\"}}}]}}' -n ${myNamespace}"

      openshiftDeploy depCfg: "${myApp}", namespace: "${myNamespace}", verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyDeployment depCfg: "${myApp}", namespace: "${myNamespace}", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
      //openshiftVerifyService namespace: "${myNamespace}", svcName: "${myApp}", verbose: 'false'
      if (verifyService("http://mlbparks-adv-dev-hw.mikes-apps.mikelacourse-services.com/ws/info") == fale)
      {
        currentBuild.result = 'FAILURE'
        throw new hudson.AbortException('Uable to verify service')
      }  
   }

  stage('Deploy to Test') {
    // Patch the DeploymentConfig so that it points to the latest TestingCandidate-${version} Image.
    // Replace xyz-mlbparks-dev with the name of your dev project
    sh "oc project " + myNamespace + "-test"
    sh "oc patch dc ${myApp} --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"${myApp}\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"${myNamespace}\", \"name\": \"${myApp}:$newTag\"}}}]}}' -n ${myNamespace}-test"

      openshiftDeploy depCfg: "${myApp}", namespace: "${myNamespace}-test", verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyDeployment depCfg: "${myApp}", namespace: "${myNamespace}-test", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
      //openshiftVerifyService namespace: "${myNamespace}-test", svcName: "${myApp}", verbose: 'false'
      if (verifyService("http://mlbparks-adv-dev-hw-test.mikes-apps.mikelacourse-services.com/ws/info") == fale)
      {
        currentBuild.result = 'FAILURE'
        throw new hudson.AbortException('Uable to verify service')
      }

   }



  // Run some integration tests (see the openshift-mlbparks Github Repository README.md for ideas).
  // Once the tests succeed tag the image as ProdReady-${version}
  stage('Integration Test') {
       println("Start of Integration Test");
       def retries = 20;
       // Wait for app to be ready
       def status = 0

      if (verifyService("http://mlbparks-adv-dev-hw-test.mikes-apps.mikelacourse-services.com/ws/info") == fale)
      {
        currentBuild.result = 'FAILURE'
        throw new hudson.AbortException('Uable to verify service')
      }

       while (retries >= 0 && status != 200)
       {
          try {
              def response = httpRequest 'http://mlbparks-adv-dev-hw-test.apps.na1.openshift.opentlc.com/mlbparks/ws/info'
              println("Status: "+response.status)
              if (200 == response.status)
              {
                 status = 200;
             }
          } catch (Exception ex)
          {
             println("Warn:" + ex.getMessage());
          }
          Thread.sleep(5000);
          retries--;
      }
      if (status != 200)
      {
        println("Unable to get integration service");
        currentBuild.result = 'FAILURE'
        throw new hudson.AbortException('Integration test failed!')
      }
      def response = httpRequest 'http://mlbparks-adv-dev-hw-test.apps.na1.openshift.opentlc.com/mlbparks/ws/data/load'
      println("Status: "+response.status)
      println("Content: "+response.content)
      if ("Items inserted in database: 30" != response.content)
      {
        currentBuild.result = 'FAILURE'
        throw new hudson.AbortException('Integration test failed!')
      }
      println("Integration test passed!");

  }

  // Blue/Green Deployment into Production
  // -------------------------------------
  // Next two stages could be one.
  // Make sure to deploy the right version. If green is active then deploy blue, and vice versa.
  // You will need to figure out which application is active and set the target to the other.
  stage('Prep Production Deployment') {
    // TBD
  }
  // Deploy the ProdReady-${version} image. Make sure this is the actual tagged image deployed!
  // Do not activate the new version yet.
  stage('Deploy new Version') {
    // TBD
  }

  // Once approved (input step) switch production over to the new version.
  stage('Switch over to new Version') {
    input "Switch Production?"
    // TBD
  }
}

//Service
def verifyService(url)
      def status = 0
      def retries = 20
       while (retries >= 0 && status != 200)
       {
          try {
              def response = httpRequest url
              println("Status: "+response.status)
              if (200 == response.status)
              {
                 status = 200;
             }
          } catch (Exception ex)
          {
             println("Warn:" + ex.getMessage());
          }
          Thread.sleep(5000);
          retries--;
      }
      if (status != 200)
      {
        println("Unable to verify service");
        return false
      }
     return true
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
